// src/main/java/com/travelgenix/model/User.java
package com.travelgenix.model;

import jakarta.persistence.*;
import lombok.Data;
import jakarta.validation.constraints.*;

@Data
@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Name is required")
    private String name;

    @Email(message = "Valid email is required")
    @Column(unique = true)
    private String email;

    @NotBlank(message = "Password is required")
    @Size(min = 6, message = "Password must be at least 6 characters")
    private String password;

    @Column(name = "phone_number")
    private String phoneNumber;
}

// src/main/java/com/travelgenix/model/Booking.java
package com.travelgenix.model;

import jakarta.persistence.*;
import lombok.Data;
import java.time.LocalDateTime;

@Data
@Entity
@Table(name = "bookings")
public class Booking {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private BookingType type; // FLIGHT, HOTEL, CAR, BUS

    @Column(nullable = false)
    private LocalDateTime bookingDate;

    private String source;
    private String destination;
    private LocalDateTime travelDate;
    private String status;
}

// src/main/java/com/travelgenix/dto/BookingDTO.java
package com.travelgenix.dto;

import lombok.Data;
import java.time.LocalDateTime;

@Data
public class BookingDTO {
    private Long userId;
    private String bookingType;
    private String source;
    private String destination;
    private LocalDateTime travelDate;
}

// src/main/java/com/travelgenix/repository/UserRepository.java
package com.travelgenix.repository;

import com.travelgenix.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
    boolean existsByEmail(String email);
}

// src/main/java/com/travelgenix/service/BookingService.java
package com.travelgenix.service;

import com.travelgenix.model.Booking;
import com.travelgenix.dto.BookingDTO;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public interface BookingService {
    Booking createBooking(BookingDTO bookingDTO);
    Booking getBookingById(Long id);
    void cancelBooking(Long id);
}

// src/main/java/com/travelgenix/service/impl/BookingServiceImpl.java
package com.travelgenix.service.impl;

import com.travelgenix.model.Booking;
import com.travelgenix.dto.BookingDTO;
import com.travelgenix.repository.BookingRepository;
import com.travelgenix.service.BookingService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BookingServiceImpl implements BookingService {
    private final BookingRepository bookingRepository;
    private final UserRepository userRepository;

    @Override
    @Transactional
    public Booking createBooking(BookingDTO bookingDTO) {
        User user = userRepository.findById(bookingDTO.getUserId())
            .orElseThrow(() -> new RuntimeException("User not found"));
        
        Booking booking = new Booking();
        booking.setUser(user);
        booking.setType(BookingType.valueOf(bookingDTO.getBookingType()));
        booking.setSource(bookingDTO.getSource());
        booking.setDestination(bookingDTO.getDestination());
        booking.setTravelDate(bookingDTO.getTravelDate());
        booking.setBookingDate(LocalDateTime.now());
        booking.setStatus("CONFIRMED");
        
        return bookingRepository.save(booking);
    }

    @Override
    public Booking getBookingById(Long id) {
        return bookingRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Booking not found"));
    }

    @Override
    @Transactional
    public void cancelBooking(Long id) {
        Booking booking = getBookingById(id);
        booking.setStatus("CANCELLED");
        bookingRepository.save(booking);
    }
}

// src/main/java/com/travelgenix/controller/BookingController.java
package com.travelgenix.controller;

import com.travelgenix.dto.BookingDTO;
import com.travelgenix.service.BookingService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/bookings")
@RequiredArgsConstructor
public class BookingController {
    private final BookingService bookingService;

    @PostMapping
    public ResponseEntity<?> createBooking(@RequestBody BookingDTO bookingDTO) {
        return ResponseEntity.ok(bookingService.createBooking(bookingDTO));
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getBooking(@PathVariable Long id) {
        return ResponseEntity.ok(bookingService.getBookingById(id));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> cancelBooking(@PathVariable Long id) {
        bookingService.cancelBooking(id);
        return ResponseEntity.ok().build();
    }
}